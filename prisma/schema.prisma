// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Shop {
  id        String   @id @default(cuid())
  domain    String   @unique // The shop's domain, e.g., example.myshopify.com
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pixelEvents  PixelEvent[]
  pixelSessions PixelSession[]
}

model PixelEvent {
  id           String    @id @default(cuid())
  eventType    String
  timestamp    DateTime  @default(now())
  userAgent    String?
  eventData    Json      // Store the full event payload
  
  // Denormalized for potential direct queries, not part of a relation itself here
  requestShopDomain String? // The domain as received in the request
  requestSessionToken String? // The session token as received in the request

  // Relation to Shop model
  shopId       String?   // Foreign key
  shop         Shop?     @relation(fields: [shopId], references: [id])

  // Relation to PixelSession model
  pixelSessionId String?      // Foreign key
  pixelSession   PixelSession? @relation(fields: [pixelSessionId], references: [id])

  @@index([shopId])
  @@index([pixelSessionId])
  @@index([requestSessionToken])
}

model PixelSession {
  id                 String    @id @default(cuid())
  shop               Shop?     @relation(fields: [shopId], references: [id])
  shopId             String?   // Changed from Int? to String? to match Shop.id
  sessionToken       String    @unique // This was from body.id or body.metadata.uniqueToken
  clientId           String?   // Will store body.clientId
  userAgent          String?   // Add this field back
  requestShopDomain  String?
  firstSeen          DateTime  @default(now())
  lastActive         DateTime @updatedAt
  // eventCount         Int @default(0) // Can be calculated or updated via a transaction if needed

  events             PixelEvent[] // One session can have many events

  @@index([shopId])
}
