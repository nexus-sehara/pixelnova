// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Shop {
  id        String   @id @default(cuid())
  domain    String   @unique // The shop's domain, e.g., example.myshopify.com
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pixelEvents  PixelEvent[]
  pixelSessions PixelSession[]
  productMetadata ProductMetadata[]
}

model PixelEvent {
  id           String    @id @default(cuid())
  eventType    String
  timestamp    DateTime  @default(now())
  userAgent    String?
  eventData    Json      // Store the full event payload
  
  // Denormalized for potential direct queries, not part of a relation itself here
  requestShopDomain String? // The domain as received in the request
  requestSessionToken String? // The session token as received in the request

  // Relation to Shop model
  shopId       String?   // Foreign key
  shop         Shop?     @relation(fields: [shopId], references: [id])

  // Relation to PixelSession model
  pixelSessionId String?      // Foreign key
  pixelSession   PixelSession? @relation(fields: [pixelSessionId], references: [id])

  @@index([shopId])
  @@index([pixelSessionId])
  @@index([requestSessionToken])
}

model PixelSession {
  id                 String    @id @default(cuid())
  shop               Shop?     @relation(fields: [shopId], references: [id])
  shopId             String?
  sessionToken       String    // This was from body.id
  clientId           String?   // From body.clientId
  userAgent          String?   
  requestShopDomain  String?
  firstSeen          DateTime  @default(now())
  lastActive         DateTime  @updatedAt

  // New fields for richer identification
  checkoutToken      String?   // From body.data.checkout.token
  customerEmail      String?   // From body.data.checkout.email
  shopifyCustomerId  String?   // From body.data.checkout.order.customer.id
  shopifyOrderId     String?   // From body.data.checkout.order.id (available on checkout_completed)

  events             PixelEvent[]

  @@index([shopId])
  @@index([sessionToken])
  @@index([clientId])
  @@index([checkoutToken])
  @@index([customerEmail])
  @@index([shopifyCustomerId])
  @@index([shopifyOrderId])
  @@unique([shopId, clientId], name: "shopId_clientId_unique")
}

model ProductMetadata {
  id                 String    @id @default(cuid())
  shopifyProductId   String    @unique // e.g., gid://shopify/Product/12345
  shopId             String
  shop               Shop      @relation(fields: [shopId], references: [id])

  title              String
  handle             String?
  productType        String?
  vendor             String?
  tags               String[]  @default([])
  status             String?   // e.g., ACTIVE, ARCHIVED, DRAFT

  minVariantPrice    Float?    // Minimum price of its variants
  maxVariantPrice    Float?    // Maximum price of its variants
  currencyCode       String?   // Currency code for the prices

  featuredImageUrl   String?
  
  // For MVP, storing some denormalized variant and collection data as JSON.
  // Can be normalized to separate tables in a later phase if complex querying is needed.
  variantsData       Json?     // Array of basic variant info: [{ id, title, price, sku, inventoryQuantity, inventoryPolicy, imageUrl }]
  collectionsData    Json?     // Array of collection info: [{ id, title, handle }]

  shopifyCreatedAt   DateTime? // Product creation date in Shopify
  shopifyUpdatedAt   DateTime? // Product last update date in Shopify

  lastFetchedAt      DateTime  @default(now()) // When NovaPixel last fetched/updated this data
  pixelNovaUpdatedAt DateTime  @updatedAt      // When this record was updated in NovaPixel DB

  @@index([shopId])
  @@index([shopId, productType])
  @@index([shopId, vendor])
  @@index([shopId, status])
}
